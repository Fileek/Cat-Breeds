package com.storage.catbreeds.data

import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import androidx.sqlite.db.SimpleSQLiteQuery
import androidx.sqlite.db.SupportSQLiteQuery
import com.storage.catbreeds.entity.Cat
import com.storage.catbreeds.extension.BREED_COLUMN
import com.storage.catbreeds.extension.COAT_LENGTH_COLUMN
import com.storage.catbreeds.extension.COUNTRY_COLUMN
import com.storage.catbreeds.extension.ROW_ID_COLUMN
import com.storage.catbreeds.extension.SIZE_COLUMN
import com.storage.catbreeds.extension.TABLE_NAME
import com.storage.catbreeds.extension.toCatSize
import com.storage.catbreeds.extension.toCoatLength
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow

class CatDbHelper(context: Context) :
    SQLiteOpenHelper(
        context,
        TABLE_NAME,
        null,
        1
    ),
    CatDao {
    private var database: SQLiteDatabase? = null
    private var cats = MutableStateFlow(CatsList.allCats)
    private var simpleQuery = SimpleSQLiteQuery("SELECT * FROM $TABLE_NAME")
    private var sortQuery: SupportSQLiteQuery = simpleQuery

    override fun onCreate(db: SQLiteDatabase) {
        db.execSQL(
            """CREATE TABLE $TABLE_NAME (
            $BREED_COLUMN TEXT NOT NULL,
            $COUNTRY_COLUMN TEXT NOT NULL,
            $COAT_LENGTH_COLUMN TEXT NOT NULL,
            $SIZE_COLUMN TEXT NOT NULL,
            $ROW_ID_COLUMN INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT)"""
        )

        cats.value.forEach {
            db.insert(TABLE_NAME, null, decomposeCat(it))
        }
    }

    override fun onOpen(db: SQLiteDatabase?) {
        database = db
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {}

    override fun getAllCatsInRawOrder(): Flow<List<Cat>> {
        sortQuery = simpleQuery
        cats.tryEmit(getListOfCats())

        return cats
    }

    override fun getCatsByQuery(query: SupportSQLiteQuery): Flow<List<Cat>> {
        sortQuery = query
        cats.tryEmit(getListOfCats())

        return cats
    }

    private fun getListOfCats(): List<Cat> {
        val catBreedList = mutableListOf<Cat>()

        readableDatabase.rawQuery(sortQuery.sql, null)
            .use {
                if (it.moveToFirst())
                    do {
                        catBreedList.add(Cat(
                            breed = it.getString(it.getColumnIndex(BREED_COLUMN)),
                            country = it.getString(it.getColumnIndex(COUNTRY_COLUMN)),
                            coatLength = it.getString(it.getColumnIndex(COAT_LENGTH_COLUMN))
                                .toCoatLength(),
                            size = it.getString(it.getColumnIndex(SIZE_COLUMN)).toCatSize(),
                            id = it.getInt(it.getColumnIndex(ROW_ID_COLUMN))
                        ))
                    } while (it.moveToNext())
            }
        return catBreedList
    }

    override suspend fun insert(cat: Cat) {
        database?.insert(TABLE_NAME, null, decomposeCat(cat))
        cats.emit(getListOfCats())
    }

    override suspend fun update(cat: Cat) {
        database?.update(
            TABLE_NAME, decomposeCat(cat), "$ROW_ID_COLUMN = '${cat.id}'", null
        )
        cats.emit(getListOfCats())
    }

    override suspend fun delete(cat: Cat) {
        database?.delete(TABLE_NAME, "$ROW_ID_COLUMN = '${cat.id}'", null)
        cats.emit(getListOfCats())
    }

    private fun decomposeCat(cat: Cat): ContentValues {
        val values = ContentValues()
        with(values) {
            put(BREED_COLUMN, cat.breed)
            put(COUNTRY_COLUMN, cat.country)
            put(COAT_LENGTH_COLUMN, cat.coatLength.toString())
            put(SIZE_COLUMN, cat.size.toString())
            if (cat.id != 0) // if id == 0, it means cat is new and id should be autogenerated
                put(ROW_ID_COLUMN, cat.id)
        }
        return values
    }
}
